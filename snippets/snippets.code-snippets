{
    "Create dropdown": {
        "scope": "powershell",
        "prefix": ["zp dropdown"],
        "description": "Create a data source for a dynamic dropdown in zervicepoint",
        "body": [
			"function Search(\\$config, \\$search, \\$category)",
			"{    ",
			"    \\$search = \\$search -replace \"\\*\" -replace '\\)\\(.*'",
			"    ",
			"    \\$users = Get-LocalUser",
			"    \\$users = \\$users | Where-Object { \\$_.Name -match \\$Search }",
			"    \\$users | Select-Object @{",
			"        Name=\"Id\";",
			"        Expression = {",
			"            \\$_.SID",
			"        }",
			"    },",
			"    @{",
			"        Name=\"Name\";",
			"        Expression = {",
			"            \\$_.Name",
			"        }",
			"    }",
			"}",
			"",
			"function Validate(\\$config, \\$search) ",
			"{",
			"    Search \\$search -Config \\$config",
			"}",
			"",
			"function GetCategories(\\$config) ",
			"{",
			"    return @()",
			"}",
			"",
			"function GetDefault(\\$config)",
			"{    ",
			"     Search -Config \\$config",
			"}"
		]
    },
	"create dropdown role": {
		"scope": "powershell",
		"prefix": "zp dropdown role",
		"description": "Create data source for role dropdown. This requires also a dropdown.xml file",
		"body": [
			"<#",
			" step 1. do this...",
			" step 2 .. do another dropdown.xml",
			" step 3.. create role in zp",
			"#>",
			"",
			"function Search {}",
			"A data source must always return a Id,Name property."
		]
	},
	"create dropdown role xml": {
		"scope": "powershell",
		"prefix": "zp dropdown xml",
		"description": "Base template for a dropdown.xml",
		"body": [
			"<?xml version=\"1.0\" encoding=\"utf-8\"?>",
			"<dropdowns>",
			"<dropdown>",
			"<parameter name=\"Filter\">",
			"<add key=\"AllUsers\" value=\"assetmgmt/assets/templateId/$templateId?field=name&amp;field=it-status\"/>",
			"</parameter>",
			"<output>",
			"<add key=\"Id\" value=\"id\"/>",
			"<add key=\"Name\" value=\"name\"/>",
			"</output>",
			"</dropdown>",
			"</dropdowns>"
		  ],
	},		
	"Create dropdown manifest": {
		"scope": "powershell",
		"prefix": ["zp dropdown manifest"],
		"description": "Create a dropdown powershell manifest file based on current filename",
		"body": [
			"@{",
			"\tRootModule = '$TM_FILENAME_BASE.psm1'",
			"\tModuleVersion = '1.0.0'",
			"\tGUID = '$UUID'",
			"\tAuthor = '${2:Author}'",
			"\tCompanyName = '${3:Zervicepoint}'",
			"\tCopyright = '${4:(c) $CURRENT_YEAR $3. All rights reserved}'",
			"\tDescription = '${5:Displays objects from system.}'",
			"\tPowerShellVersion = '3.0'",
			"\tFunctionsToExport = 'Search', 'Validate', 'GetCategories', 'GetDefault'",
			"\tFileList = @(",
			"\t\t'$TM_FILENAME_BASE.psd1',",
			"\t\t'$TM_FILENAME_BASE.psm1'",
			"\t)",
			"",
			"}"
		]
	},
    "Create data source provider xml": {
        "scope": "xml, powershell",
        "prefix": "zp provider data source",
        "description": "Creates a clientwebservice providers.xml",
        "body": [
			"# Copy paste or run the following command lines to create a manifest file",
			"",
			"\\$xml = @\"",
			"<?xml version=\"1.0\" encoding=\"utf-8\"?>",
			"<providers>",
			"<provider name=\"${1:PackageName}\">",
			"    <assembly type=\"Zipper.ZervicePoint.ProvisioningSystem.PowerShellProvider.PowerShellEngine\" assemblyFile=\"C:\\Program Files\\Zipper\\ZervicePoint\\Web\\ClientWebService\\Bin\\Zipper.ZervicePoint.ProvisioningSystem.PowerShellProvider.dll\" />",
			"    <configuration>",
			"    <add key=\"scriptpath\" value=\"${2:C:\\Program Files\\Zipper\\Zervicepoint\\Provider extensions}\\\\${1:PackageName}\\Data sources\\\" />",
			"    </configuration>",
			"</provider>",
			"</providers>",
			"\"@",
			"",
			"",
			"\\$xml | Out-File -FilePath 'C:\\Program Files\\Zipper\\Zervicepoint\\ClientWebService\\\\${1:PackageName}.clientwebservice.providers.xml' -Encoding UTF8",
			"",
			"# Restart ProvisioningSystemInventory to trigger a new inventory of ClientWebService providers.",
			"Restart-Service -Name ProvisioningSystemInventory",
			""
		]
    },
	"Create activity provider xml": {
		"scope": "powershell",
		"prefix": "zp provider activity",
		"description": "Create a provisioningsystem providers.xml",
		"body": [
			"# Copy paste or run the following command lines to create a manifest file",
			"",
			"\\$xml = @\"",
			"<?xml version=\"1.0\" encoding=\"utf-8\"?>",
			"<providers>",
			"<provider name=\"${1:PackageName}\">",
			"    <assembly type=\"Zipper.ZervicePoint.ProvisioningSystem.PowerShellProvider.PowerShellEngine\" assemblyFile=\"C:\\Program Files\\Zipper\\ZervicePoint\\ProvisioningSystem\\Providers\\PowerShell\\Zipper.ZervicePoint.ProvisioningSystem.PowerShellProvider.dll\" />",
			"    <configuration>",
			"    <add key=\"scriptpath\" value=\"${2:C:\\Program Files\\Zipper\\Zervicepoint\\Provider extensions}\\\\${1:PackageName}\\Activities\\\" />",
			"    <add key=\"UICulture\" value=\"en-US\" />",
			"    </configuration>",
			"</provider>",
			"</providers>",
			"\"@",
			"",
			"",
			"\\$xml | Out-File -FilePath 'C:\\Program Files\\Zipper\\Zervicepoint\\ProvisioningSystem\\\\${1:PackageName}.provisioningsystem.providers.xml' -Encoding UTF8",
			"",
			"# Restart ProvisioningSystem to trigger a new inventory of ProvisioningSystem providers.",
			"Restart-Service -Name ProvisioningSystem",
			""
		]
	},   
	"Create activity": {
		"scope": "powershell",
		"prefix": ["zp activity","activity"],
		"description": "Create a function for activities in Zervicepoint",
		"body": [
			"function ${1:New-Activity}\r",
			"{\r",
			"    <#\r",
			"      .SYNOPSIS\r",
			"        A one line description of the functions purpose.\r",
			"     \r",
			"      .DESCRIPTION\r",
			"         A longer derscription of the functions purpose.\r",
			"       \r",
			"      .PARAMETER Identity\r",
			"        A description of what the parameter Identity does.\r",
			" \r",
			"      .PARAMETER Config\r",
			"        Configuration data passed from ZervicePoint to the function. Can be accessed from \\$config.\r",
			" \r",
			"      .PARAMETER Parameters\r",
			"        All parameters sent to the functions. Includes additional parameters that can be sent to the function from ZervicePoint. Can be accessed from \\$parameters.\r",
			" \r",
			"      .EXAMPLE\r",
			"        Always include at least one working code example that shows how to run the function.\r",
			"     \r",
			"      .NOTES\r",
			"         Additional notes about the function if needed.\r",
			"     \r",
			"      .LINK\r",
			"        http://www.zervicepoint.com\r",
			"    #>\r",
			"\r",
			"    param (\r",
			"        [parameter(Mandatory = \\$true)]\r",
			"        [string]\\$Identity,\r",
			" \r",
			"        [parameter(Mandatory = \\$false, ParameterSetName = \"Hidden\")]\r",
			"        [hashtable]\\$Config,\r",
			" \r",
			"        [parameter(Mandatory = \\$false, ParameterSetName = \"Hidden\")]\r",
			"        [hashtable]\\$Parameters\r",
			"    )\r",
			" \r",
			"    Import-LocalizedData -BindingVariable LocalizedData -UICulture \\$config.UICulture\r",
			"     \r",
			"    $0# start here\r",
			"\r",
			"    \\$hashTable = @{\r",
			"        ZPActivityStatus = \\$activityStatus\r",
			"        ZPErrorCode = \\$errorCode\r",
			"    }\r",
			"\r",
			"    return \\$hashTable\r",
			"}"
		]
	},
	"Create activity manifest": {
		"scope": "powershell",
		"prefix": "zp manifest activity",
		"body": [
			"@{",
			"\tRootModule = '$TM_FILENAME_BASE.psm1'",
			"\tModuleVersion = '1.0.0'",
			"\tGUID = '$UUID'",
			"\tAuthor = '${2:Author}'",
			"\tCompanyName = '${3:Zervicepoint}'",
			"\tCopyright = '${4:(c) 2020 $3. All rights reserved}'",
			"\tDescription = '${5:Displays objects from system.}'",
			"\tPowerShellVersion = '3.0'",
			"\tFunctionsToExport = '*'",
			"\tFileList = @(",
			"\t\t'$TM_FILENAME_BASE.psd1',",
			"\t\t'$TM_FILENAME_BASE.psm1'",
			"\t)",
			"",
			"}"
		]
	},
	"Create activity culture": {
		"scope": "powershell",
		"prefix": ["zp activity culture"],
		"description": "Create activity culture file. (en-US\\Activity.PluginName.psd1)",
		"body": [
			"ConvertFrom-StringData @'",
			"NewActivity0 = Created object successfully.",
			"NewActivity1 = Failed to create object.",
			"'@"
		]		
	},
	"Create activity base": {
		"scope": "powershell",
		"prefix": "zp base activity",
		"body": [
			"# Copy paste or run the following command lines to create a manifest file",
			"#",
			"# Ensure a folder path to manifest file exists.",
			"New-Item -Path 'C:\\Program Files\\Zipper\\Zervicepoint\\Provider extensions\\\\${1:PackageName}\\Activities\\\\Activity.${2:RootModule}\\\\Activity.${2:RootModule}.psd1' -Force -ItemType File",
			"New-Item -Path 'C:\\Program Files\\Zipper\\Zervicepoint\\Provider extensions\\\\${1:PackageName}\\Activities\\\\Activity.${2:RootModule}\\\\Activity.${2:RootModule}.psm1' -Force -ItemType File",
			"New-Item -Path 'C:\\Program Files\\Zipper\\Zervicepoint\\Provider extensions\\\\${1:PackageName}\\Activities\\\\Activity.${2:RootModule}\\en-us\\\\Activity.${2:RootModule}.psd1' -Force -ItemType File",
			"",
			"# Create powershell manifest",
			"New-ModuleManifest `",
			"\t-RootModule 'Activity.${2:RootModule}.psm1' `",
			"\t-ModuleVersion '0.0.1' `",
			"\t-Author '${3:Author}' `",
			"\t-Company '${4:Company}' `",
			"\t-Copyright '(c) 2020 $4. All rights reserved' `",
			"\t-Description '' `",
			"\t-PowerShellVersion '3.0' `",
			"\t-FunctionsToExport '*' `",
			"\t-FileList @('Activity.${2:RootModule}.psd1','Activity.${2:RootModule}.psm1', 'en-us\\Activity.${2:RootModule}.psd1') `",
			"\t-Path 'C:\\Program Files\\Zipper\\Zervicepoint\\Provider extensions\\\\$1\\Activities\\\\Activity.$2\\\\Activity.$2.psd1'",
			""
		]
	},
	"Create webservice": {
		"scope": "powershell",
		"prefix": "zp webservice",
		"description": "Create webservice data source",
		"body": [
			"function Get-ZPDemo",
			"{",
			"\t<#",
			"\t  .SYNOPSIS",
			"\t  A one line description of the functions purpose.",
			"",
		  	"\t  .DESCRIPTION",
			"\t  A longer derscription of the functions purpose.",
		   	"",
		  	"\t  .PARAMETER Identity",
			"\t  A description of what the parameter Identity does.",
			"",
		  	"\t  .PARAMETER Config",
			"\t  Configuration data passed from ZervicePoint to the function. Can be accessed from config",
	 		"",
		  	"\t  .PARAMETER Parameters",
			"\t  All parameters sent to the functions. Includes additional parameters that can be sent to the function from ZervicePoint. Can be accessed from $parameters.",
			"",
			"",
		  	"\t  .EXAMPLE",
			"\t  Always include at least one working code example that shows how to run the function.",
			"",
		  	"\t  .NOTES",
			"\t  Additional notes about the function if needed.",
			"",
			"\t  .LINK",
			"\t  http://www.zervicepoint.com",
			"\t#>",
			"param (",
			"\t[parameter(Mandatory = \\$true)]",
			"\t[string]\\$Identity,",
			"",
			"\t[parameter(Mandatory = \\$false, ParameterSetName = \"Hidden\")]",
			"\t[hashtable]\\$config,",
			"",
			"\t[parameter(Mandatory = \\$false, ParameterSetName = \"Hidden\")]",
			"\t[hashtable]\\$Parameters",
			")",
			"",
			"\t $0",
			"",
			"\t\\$psObject = [pscustomobject]@{\"Output\"=\"Hello \\$(\\$Identity)\"}",
			"\treturn \\$psobject",
			"",
			"}"
		]
	},
	"help parameter": {
		"scope": "powershell",
		"prefix": ".PARAMETER",
		"body": [
			"  .PARAMETER ${1:Identity}",
			"    ${2:A description of what the parameter $1 does.}$0"
		]
	},
	"Get-PFCredential": {
		"scope": "powershell",
		"prefix": "Get-PFCredential",
		"description": "Get-PFCredential from $Config",
		"body": [
			"if ([string]\\$config.Credential) {",
			"    \\$credential = Get-PFCredential -Name \\$config.Credential",
			"}",
			"",
			"if (\\$credential) {",
			"    $0# do something",
			"}"
		]		
	}
}