{
    "dropdown": {
        "scope": "powershell",
        "prefix": ["zp dropdown"],
        "description": "Required functions for a dynamic dropdown in zervicepoint",
        "body": [
			"function Search(\\$config, \\$search, \\$category)",
			"{    ",
			"    \\$search = \\$search -replace \"\\*\" -replace '\\)\\(.*'",
			"    ",
			"    \\$users = Get-LocalUser",
			"    \\$users = \\$users | Where-Object { \\$_.Name -match \\$Search }",
			"    \\$users | Select-Object @{",
			"        Name=\"Id\";",
			"        Expression = {",
			"            \\$_.SID",
			"        }",
			"    },",
			"    @{",
			"        Name=\"Name\";",
			"        Expression = {",
			"            \\$_.Name",
			"        }",
			"    }",
			"}",
			"",
			"function Validate(\\$config, \\$search) ",
			"{",
			"    Search \\$search -Config \\$config",
			"}",
			"",
			"function GetCategories(\\$config) ",
			"{",
			"    return @()",
			"}",
			"",
			"function GetDefault(\\$config)",
			"{    ",
			"     Search -Config \\$config",
			"}"
		]
    },
	"dropdown-currentuser": {
        "scope": "powershell",
        "prefix": ["zp dropdown currentuser"],
        "description": "Retrieve ADUser based on currently logged on user. (For data sources)",
        "body": [
			"\\$currentUser = Get-PFADUser -DomainController \\$config.DomainController -LdapFilter \"(&(objectCategory=person)(objectClass=user)(mail=\\$(\\$config.currentuser)))\" -Property \\$properties -PageSize 1"
		]
    },
	"dropdown-output": {
		"scope": "powershell",
		"prefix": ["zp dropdown output","output dropdown"],
		"description": "Select property from object and transform property name to Id,Name",
		"body": [			
			"\\$psobject | Select-Object @{",
			"    Name=\"Id\";",
			"    Expression = {",
			"        \\$_.Identifier",
			"    }}dropd,",
			"    @{",
			"    Name=\"Name\";",
			"    Expression = {",
			"        \\$_.DisplayName",
			"    }}",
		]
	},
	"create dropdown role": {
		"scope": "powershell",
		"prefix": "zp dropdown role",
		"description": "Delegation via Zervicepoint role example.",
		"body": [
			"function Search(\\$search,\\$category,\\$config)",
			"{",
			"",
			"    \\$data = @()",
			"",
			"    if (\\$config.roles -contains \"Day\") {",
			"        \\$data += @(\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\",\"Sunday\") |  Where-Object {\\$_ -match \\$search}",
			"    }",
			"",
			"   if (\\$config.roles -contains \"Month\") {",
			"        \\$data += @(\"January\",\"February\",\"Mars\",\"April\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\") |  Where-Object {\\$_ -match \\$search}",
			"    }",
			"",
			"    \\$result = \\$data",
			"    \\$result | Select-Object @{ ",
			"        Name=\"Id\";",
			"        Expression = {",
			"            \\$_",
			"        }",
			"    },",
			"    @{",
			"        Name=\"Name\";",
			"        Expression = {",
			"            \\$_",
			"        }",
			"    }",
			"}",
			"",
			"function GetDefault(\\$config, \\$search)",
			"{",
			"    Search -Search \\$search",
			"}"
		]
	},
	"dropdown module manifest": {
		"scope": "powershell",
		"prefix": ["zp dropdown manifest"],
		"description": "Create a dropdown powershell manifest file based on current filename",
		"body": [
			"@{",
			"    RootModule = '$TM_FILENAME_BASE.psm1'",
			"    ModuleVersion = '1.0.0'",
			"    GUID = '$UUID'",
			"    Author = '${2:Author}'",
			"    CompanyName = '${3:Example}'",
			"    Copyright = '${4:(c) $CURRENT_YEAR $3. All rights reserved}'",
			"    Description = '${5:Displays objects from system.}'",
			"    PowerShellVersion = '3.0'",
			"    FunctionsToExport = 'Search', 'Validate', 'GetCategories', 'GetDefault'",
			"    FileList = @(",
			"        '$TM_FILENAME_BASE.psd1',",
			"        '$TM_FILENAME_BASE.psm1'",
			"    )",
			"",
			"}"
		]
	},
    "Create data source provider xml": {
        "scope": "xml, powershell",
        "prefix": "zp provider data source",
        "description": "Creates a clientwebservice providers.xml",
        "body": [
			"# Copy paste or run the following command lines to create a manifest file",
			"",
			"\\$xml = @\"",
			"<?xml version=\"1.0\" encoding=\"utf-8\"?>",
			"<providers>",
			"<provider name=\"${1:PackageName}\">",
			"    <assembly type=\"Zipper.ZervicePoint.ProvisioningSystem.PowerShellProvider.PowerShellEngine\" assemblyFile=\"C:\\Program Files\\Zipper\\ZervicePoint\\Web\\ClientWebService\\Bin\\Zipper.ZervicePoint.ProvisioningSystem.PowerShellProvider.dll\" />",
			"    <configuration>",
			"    <add key=\"scriptpath\" value=\"${2:C:\\Program Files\\Zipper\\Zervicepoint\\Provider extensions}\\\\${1:PackageName}\\Data sources\\\" />",
			"    </configuration>",
			"</provider>",
			"</providers>",
			"\"@",
			"",
			"",
			"\\$xml | Out-File -FilePath 'C:\\Program Files\\Zipper\\Zervicepoint\\ClientWebService\\\\${1:PackageName}.clientwebservice.providers.xml' -Encoding UTF8",
			"",
			"# Restart ProvisioningSystemInventory to trigger a new inventory of ClientWebService providers.",
			"Restart-Service -Name ProvisioningSystemInventory",
			""
		]
    },
	"Create activity provider xml": {
		"scope": "powershell",
		"prefix": "zp provider activity",
		"description": "Create a provisioningsystem providers.xml",
		"body": [
			"# Copy paste or run the following command lines to create a manifest file",
			"",
			"\\$xml = @\"",
			"<?xml version=\"1.0\" encoding=\"utf-8\"?>",
			"<providers>",
			"<provider name=\"${1:PackageName}\">",
			"    <assembly type=\"Zipper.ZervicePoint.ProvisioningSystem.PowerShellProvider.PowerShellEngine\" assemblyFile=\"C:\\Program Files\\Zipper\\ZervicePoint\\ProvisioningSystem\\Providers\\PowerShell\\Zipper.ZervicePoint.ProvisioningSystem.PowerShellProvider.dll\" />",
			"    <configuration>",
			"    <add key=\"scriptpath\" value=\"${2:C:\\Program Files\\Zipper\\Zervicepoint\\Provider extensions}\\\\${1:PackageName}\\Activities\\\" />",
			"    <add key=\"UICulture\" value=\"en-US\" />",
			"    </configuration>",
			"</provider>",
			"</providers>",
			"\"@",
			"",
			"",
			"\\$xml | Out-File -FilePath 'C:\\Program Files\\Zipper\\Zervicepoint\\ProvisioningSystem\\\\${1:PackageName}.provisioningsystem.providers.xml' -Encoding UTF8",
			"",
			"# Restart ProvisioningSystem to trigger a new inventory of ProvisioningSystem providers.",
			"Restart-Service -Name ProvisioningSystem",
			""
		]
	},   
	"activity": {
		"scope": "powershell",
		"prefix": ["zp activity","activity"],
		"description": "Create a function for activities in Zervicepoint",
		"body": [
			"function ${1:New-Activity}\r",
			"{",
			"    <#",
			"      .SYNOPSIS",
			"        A one line description of the functions purpose.",
			"     ",
			"      .DESCRIPTION",
			"         A longer description of the functions purpose.",
			"       ",
			"      .PARAMETER Identity",
			"        A description of what the parameter Identity does.",
			"",
			"      .PARAMETER Config",
			"        Configuration data passed from ZervicePoint to the function. Can be accessed from \\$config.",
			"",
			"      .PARAMETER Parameters",
			"        All parameters sent to the functions. Includes additional parameters that can be sent to the function from ZervicePoint. Can be accessed from \\$parameters.",
			"",
			"      .EXAMPLE",
			"        Always include at least one working code example that shows how to run the function.",
			"     ",
			"      .NOTES",
			"         Additional notes about the function if needed.",
			"     ",
			"      .LINK",
			"        http://www.zervicepoint.com",
			"    #>",
			"",
			"    param (",
			"        [parameter(Mandatory = \\$true)]",
			"        [string]\\$Identity,",
			"",
			"        [parameter(Mandatory = \\$false, ParameterSetName = \"Hidden\")]",
			"        [hashtable]\\$Config,",
			"",
			"        [parameter(Mandatory = \\$false, ParameterSetName = \"Hidden\")]",
			"        [hashtable]\\$Parameters",
			"    )",
			"",
			"    Import-LocalizedData -BindingVariable LocalizedData -UICulture \\$config.UICulture",
			"     ",
			"    $0# start here",
			"",
			"    \\$hashTable = @{",
			"        ZPActivityStatus = \\$activityStatus",
			"        ZPErrorCode = \\$errorCode",
			"    }",
			"",
			"    return \\$hashTable",
			"}"
		]
	},
	"activity-prefix": {
		"scope": "powershell",
		"prefix": ["zp activity prefix","activity prefix"],
		"description": "Create a function for activities in Zervicepoint",
		"body": [
			"function ${1:New-Activity}\r",
			"{",
			"    <#",
			"      .SYNOPSIS",
			"        A one line description of the functions purpose.",
			"     ",
			"      .DESCRIPTION",
			"         A longer description of the functions purpose.",
			"       ",
			"      .PARAMETER Identity",
			"        A description of what the parameter Identity does.",
			"",
			"      .PARAMETER Config",
			"        Configuration data passed from ZervicePoint to the function. Can be accessed from \\$config.",
			"",
			"      .PARAMETER Parameters",
			"        All parameters sent to the functions. Includes additional parameters that can be sent to the function from ZervicePoint. Can be accessed from \\$parameters.",
			"",
			"      .PARAMETER Prefix",
			"        Specifies a prefix for the commands output. For example: User.",
			"        The prefix can be useful if you do not want to override existing variables.",
			"        By setting the prefix to \"User\", the command returns variables such as: UserSamaccountName and UserPassword.",
			"",
			"      .EXAMPLE",
			"        Always include at least one working code example that shows how to run the function.",
			"     ",
			"      .NOTES",
			"         Additional notes about the function if needed.",
			"     ",
			"      .LINK",
			"        http://www.zervicepoint.com",
			"    #>",
			"",
			"    param (",
			"        [parameter(Mandatory = \\$true)]",
			"        [string]\\$Identity,",
			"",
			"        [parameter(mandatory = \\$false)]",
			"        [string]\\$Prefix,",
			"",
			"        [parameter(Mandatory = \\$false, ParameterSetName = \"Hidden\")]",
			"        [hashtable]\\$Config,",
			"",
			"        [parameter(Mandatory = \\$false, ParameterSetName = \"Hidden\")]",
			"        [hashtable]\\$Parameters",
			"    )",
			"",
			"    Import-LocalizedData -BindingVariable LocalizedData -UICulture \\$config.UICulture",
			"     ",
			"    \\$data = Get-Service -Name W32Time",
			"    \\$hashTable = \\$data | Select-Object Name,DisplayName,Status | ConvertTo-PFHashTable -Prefix \\$Prefix",
			"    <#",
			"    \\$hashTable",
			"    Name                           Value",
			"    ----                           -----",
			"    MyPrefixDisplayName            Windows Time",
			"    MyPrefixName                   W32Time",
			"    MyPrefixStatus                 Stopped",
			"    #>",
			"    ",
			"    \\$hashTable.Add(\"ZPActivityStatus\",\"The service \\$(\\$data.name) is currently \\$(\\$data.Status)\")",
			"    \\$hashTable.Add(\"ZPErrorCode\",0)",
			"",
			"    <#",
			"    \\$hashTable",
			"    Name                           Value",
			"    ----                           -----",
			"    MyPrefixDisplayName            Windows Time",
			"    MyPrefixName                   W32Time",
			"    MyPrefixStatus                 Stopped",
			"    ZPErrorCode                    0",
			"    ZPActivityStatus               The service W32Time is currently Stopped",
			"    #>",
			"",
			"    return \\$hashTable",
			"}"
		]
	},
	"Create activity manifest": {
		"scope": "powershell",
		"prefix": "zp manifest activity",
		"body": [
			"@{",
			"    RootModule = '$TM_FILENAME_BASE.psm1'",
			"    ModuleVersion = '1.0.0'",
			"    GUID = '$UUID'",
			"    Author = '${2:Author}'",
			"    CompanyName = '${3:Example}'",
			"    Copyright = '${4:(c) $CURRENT_YEAR $3. All rights reserved}'",
			"    Description = '${5:Displays objects from system.}'",
			"    PowerShellVersion = '3.0'",
			"    FunctionsToExport = '*'",
			"    FileList = @(",
			"        '$TM_FILENAME_BASE.psd1',",
			"        '$TM_FILENAME_BASE.psm1'",
			"    )",
			"",
			"}"
		]
	},
	"Create activity culture": {
		"scope": "powershell",
		"prefix": ["zp activity culture"],
		"description": "Create activity culture file. (en-US\\Activity.PluginName.psd1)",
		"body": [
			"ConvertFrom-StringData @'",
			"NewActivity0 = Created object successfully.",
			"NewActivity1 = Failed to create object.",
			"'@"
		]		
	},
	"Create activity base": {
		"scope": "powershell",
		"prefix": "zp base activity",
		"body": [
			"# Copy paste or run the following command lines to create a manifest file",
			"#",
			"# Ensure a folder path to manifest file exists.",
			"New-Item -Path 'C:\\Program Files\\Zipper\\Zervicepoint\\Provider extensions\\\\${1:PackageName}\\Activities\\\\Activity.${2:RootModule}\\\\Activity.${2:RootModule}.psd1' -Force -ItemType File",
			"New-Item -Path 'C:\\Program Files\\Zipper\\Zervicepoint\\Provider extensions\\\\${1:PackageName}\\Activities\\\\Activity.${2:RootModule}\\\\Activity.${2:RootModule}.psm1' -Force -ItemType File",
			"New-Item -Path 'C:\\Program Files\\Zipper\\Zervicepoint\\Provider extensions\\\\${1:PackageName}\\Activities\\\\Activity.${2:RootModule}\\en-us\\\\Activity.${2:RootModule}.psd1' -Force -ItemType File",
			"",
			"# Create powershell manifest",
			"New-ModuleManifest `",
			"    -RootModule 'Activity.${2:RootModule}.psm1' `",
			"    -ModuleVersion '0.0.1' `",
			"    -Author '${3:Author}' `",
			"    -Company '${4:Company}' `",
			"    -Copyright '(c) $CURRENT_YEAR $4. All rights reserved' `",
			"    -Description '' `",
			"    -PowerShellVersion '3.0' `",
			"    -FunctionsToExport '*' `",
			"    -FileList @('Activity.${2:RootModule}.psd1','Activity.${2:RootModule}.psm1', 'en-us\\Activity.${2:RootModule}.psd1') `",
			"    -Path 'C:\\Program Files\\Zipper\\Zervicepoint\\Provider extensions\\\\$1\\Activities\\\\Activity.$2\\\\Activity.$2.psd1'",
			""
		]
	},
	"webservice": {
		"scope": "powershell",
		"prefix": "zp webservice",
		"description": "Create webservice data source",
		"body": [
			"function Get-ZPDemo",
			"{",
			"    <#",
			"      .SYNOPSIS",
			"      A one line description of the functions purpose.",
			"",
		  	"      .DESCRIPTION",
			"      A longer description of the functions purpose.",
		   	"",
		  	"      .PARAMETER Identity",
			"      A description of what the parameter Identity does.",
			"",
		  	"      .PARAMETER Config",
			"      Configuration data passed from ZervicePoint to the function. Can be accessed from config",
	 		"",
		  	"      .PARAMETER Parameters",
			"      All parameters sent to the functions. Includes additional parameters that can be sent to the function from ZervicePoint. Can be accessed from $parameters.",
			"",
			"",
		  	"      .EXAMPLE",
			"      Always include at least one working code example that shows how to run the function.",
			"",
		  	"      .NOTES",
			"      Additional notes about the function if needed.",
			"",
			"      .LINK",
			"      http://www.zervicepoint.com",
			"    #>",
			"param (",
			"    [parameter(Mandatory = \\$true)]",
			"    [string]\\$Identity,",
			"",
			"    [parameter(Mandatory = \\$false, ParameterSetName = \"Hidden\")]",
			"    [hashtable]\\$config,",
			"",
			"    [parameter(Mandatory = \\$false, ParameterSetName = \"Hidden\")]",
			"    [hashtable]\\$Parameters",
			")",
			"",
			"     $0",
			"",
			"    \\$psObject = [pscustomobject]@{\"Output\"=\"Hello \\$(\\$Identity)\"}",
			"    return \\$psobject",
			"",
			"}"
		]
	},
	"Create webservice manifest": {
		"scope": "powershell",
		"prefix": "zp manifest webservice",
		"body": [
			"@{",
			"    RootModule = '$TM_FILENAME_BASE.psm1'",
			"    ModuleVersion = '1.0.0'",
			"    GUID = '$UUID'",
			"    Author = '${2:Author}'",
			"    CompanyName = '${3:Example}'",
			"    Copyright = '${4:(c) $CURRENT_YEAR $3. All rights reserved}'",
			"    Description = '${5:Displays objects from system.}'",
			"    PowerShellVersion = '3.0'",
			"    FunctionsToExport = '*'",
			"    FileList = @(",
			"        '$TM_FILENAME_BASE.psd1',",
			"        '$TM_FILENAME_BASE.psm1'",
			"    )",
			"",
			"}"
		]
	},
	"table": {
		"scope": "powershell",
		"prefix": "zp table",
		"description": "Create table data source",
		"body": [
			"function Get-ZPTableDemo",
			"{",
			"    param (",
			"        [parameter(Mandatory = \\$false, ParameterSetName = \"Hidden\")]",
			"        [hashtable]\\$config",
			"    )",
			"    $0",
			"    \\$data = Get-Alias",
			"    if(\\$data) {",
			"        \\$output = \\$data | Select-Object -Property @{Name=\"Alias\";Expression={\\$_.Name}},@{Name=\"Description\";Expression={\\$_.DisplayName}},Definition",
			"    }",
			"",
			"    return \\$output",
			"",
			"}"
		]
	},
	"Create table manifest": {
		"scope": "powershell",
		"prefix": "zp manifest table",
		"body": [
			"@{",
			"    RootModule = '$TM_FILENAME_BASE.psm1'",
			"    ModuleVersion = '1.0.0'",
			"    GUID = '$UUID'",
			"    Author = '${2:Author}'",
			"    CompanyName = '${3:Example}'",
			"    Copyright = '${4:(c) $CURRENT_YEAR $3. All rights reserved}'",
			"    Description = '${5:Displays objects from system.}'",
			"    PowerShellVersion = '3.0'",
			"    FunctionsToExport = '*'",
			"    FileList = @(",
			"        '$TM_FILENAME_BASE.psd1',",
			"        '$TM_FILENAME_BASE.psm1'",
			"    )",
			"",
			"}"
		]
	},
	"help parameter": {
		"scope": "powershell",
		"prefix": ".PARAMETER",
		"body": [
			"  .PARAMETER ${1:Identity}",
			"    ${2:A description of what the parameter $1 does.}$0"
		]
	},
	"Get-PFCredential": {
		"scope": "powershell",
		"prefix": "zp Get-PFCredential",
		"description": "Get-PFCredential from $Config",
		"body": [
			"if ([string]\\$config.Credential) {",
			"    \\$credential = Get-PFCredential -Name \\$config.Credential",
			"}",
			"",
			"if (\\$credential) {",
			"    $0# do something",
			"}"
		]		
	},
	"Get-PFAdditionalParameter": {
		"scope": "powershell",
		"prefix": "zp Get-PFAdditionalParameter",
		"description": "Create hashtable that only include any additional parameters added",
		"body":[
			"# \\$Parameters required in param block",
			"\\$additionalParameters = Get-PFAdditionalParameters -Parameters \\$Parameters"
		]
	},
	"Get-PFAdditionalParameter-example": {
		"scope": "powershell",
		"prefix": "zp Get-PFAdditionalParameter example",
		"description": "Create hashtable that only include any additional parameters added",
		"body":[
			"# \\$Parameters required in param block",
			"\\$additionalParameters = Get-PFAdditionalParameters -Parameters \\$Parameters",
			"",			
			"if (-not \\$additionalParameters) {",
			"    return @{",
			"        ZPActivityStatus = \"You did not add any additional parameters\"",
			"    }",
			"}",
			"# Example - Pass additional parameters via splatting to another function.",
			"Set-ADUser -Identity \\$Identity @additionalParameters",
			""
		]
	},
	"try catch Write-PFError": {
		"scope": "powershell",
		"prefix": ["zp try","zp Write-PFError"],
		"description": "try catch with Write-PFError",
		"body": [
			"try {",
			"    \\$adUser = New-ADUser -Name \"\" -ErrorAction Stop",
			"}",
			"catch {",
			"    Write-PFError -Message \"Failed to create user\" -Exception \\$_ -Config \\$Config -Parameters \\$Parameters",
			"}"
		]
	},
	"config": {
		"scope": "powershell",
		"prefix": ["zp config parameter"],
		"description": "parameter for $config",
		"body": [
			"[parameter(Mandatory = \\$false, ParameterSetName = \"Hidden\")]",
			"[hashtable]\\$Config"
		]
	},
	"parameters": {
		"scope": "powershell",
		"prefix": ["zp parameters"],
		"description": "parameter for $parameters",
		"body": [
			"[parameter(Mandatory = \\$false, ParameterSetName = \"Hidden\")]",
			"[hashtable]\\$Parameters"
		]
	}
}